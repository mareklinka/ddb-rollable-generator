@page "/"
@inject IJSRuntime JS

<h1>D&D Beyond Rollable Constructor</h1>
<div>Are you using D&D Beyond? Are you creating your own homebrew monsters? Do you want to make the stat-blocks rollable but you can't be bothered to remember the weird syntax? You are in luck.</div>
<div>The form below will allow you to easily construct that pesky JSON rollable syntax - just copy the result and paste it into your stat-block!</div>
<br />

<EditForm Model="@formModel">
    <div>
        <label>Action name:</label>
        <CustomInputText @bind-Value="formModel.RollAction"></CustomInputText>
    </div>
    <div>
        <label>Dice expression: </label>
        <CustomInputText @bind-Value="formModel.DiceNotation"></CustomInputText>
    </div>
    <div>
        <label>Button content:</label>
        <CustomInputText @bind-Value="formModel.DisplayNotation"></CustomInputText>
    </div>
    <div>
        <label>Roll type:</label>
        <InputSelect @bind-Value="formModel.RollType">
            @foreach (var Item in Enum.GetValues<RollType>())
            {
                <option value="@Item">@Item</option>
            }
        </InputSelect>
    </div>
    @if (formModel.RollType == RollType.Damage)
    {
        <div>
            <label>Damage type:</label>
            <InputSelect @bind-Value="formModel.DamageType">
                @foreach (var Item in Enum.GetValues<DamageType>())
                    {
                    <option value="@Item">@Item</option>
                    }
            </InputSelect>
        </div>
    }
</EditForm>
<br />
<div>
    @if (formModel.RollType == RollType.Damage)
    {
        <pre id="rollable-def">[rollable]@GetCoalescedDisplayNotation();{ "rollAction": "@formModel.RollAction", "diceNotation": "@formModel.DiceNotation", "rollType": "@RollTypeValue(formModel.RollType)", "damageType": "@DamageTypeValue(formModel.DamageType)" }[/rollable]</pre>
    }
    else
    {
        <pre id="rollable-def">[rollable]@GetCoalescedDisplayNotation();{ "rollAction": "@formModel.RollAction", "diceNotation": "@formModel.DiceNotation", "rollType": "@RollTypeValue(formModel.RollType)" }[/rollable]</pre>
    }
    <button @onclick="@CopyTextToClipboard">Copy</button>
</div>

@code
{
    private readonly FormModel formModel = new() { RollAction = "Warhammer", DiceNotation = "1d20+5", RollType = RollType.ToHit, DisplayNotation = "+5" };

    private static string RollTypeValue(RollType type)
    {
        return type switch
        {
            RollType.Roll => "roll",
            RollType.ToHit => "to hit",
            RollType.Damage => "damage",
            RollType.Heal => "heal",
            RollType.Spell => "spell",
            RollType.Save => "save",
            RollType.Check => "check"
        };
    }

    private string GetCoalescedDisplayNotation()
    {
        return string.IsNullOrWhiteSpace(formModel.DisplayNotation) ? formModel.DiceNotation : formModel.DisplayNotation;
    }

    private static string DamageTypeValue(DamageType type)
    {
        return type.ToString().ToLowerInvariant();
    }

    private async Task CopyTextToClipboard()
    {
        await JS.InvokeVoidAsync("clipboardCopy.copyRollable");
    }

    public class FormModel
    {
        public string DiceNotation { get; set; }
        public string DisplayNotation { get; set; }
        public string RollAction { get; set; }
        public RollType RollType { get; set; }
        public DamageType DamageType { get; set; }
    }

    public enum RollType
    {
        Roll = 0,
        ToHit = 1,
        Damage = 2,
        Heal = 3,
        Spell = 4,
        Save = 5,
        Check = 6
    }

    public enum DamageType
    {
        Acid = 0,
        Bludgeoning = 1,
        Cold = 2,
        Fire = 3,
        Force = 4,
        Lightning = 5,
        Necrotic = 6,
        Piercing = 7,
        Poison = 8,
        Psychic = 9,
        Radiant = 10,
        Slashing = 11,
        Thunder = 12
    }
}